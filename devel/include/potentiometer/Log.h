// Generated by gencpp from file potentiometer/Log.msg
// DO NOT EDIT!


#ifndef POTENTIOMETER_MESSAGE_LOG_H
#define POTENTIOMETER_MESSAGE_LOG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace potentiometer
{
template <class ContainerAllocator>
struct Log_
{
  typedef Log_<ContainerAllocator> Type;

  Log_()
    : data0(0.0)
    , data1(0)
    , data2(0)
    , data3(0.0)
    , data4(0.0)  {
    }
  Log_(const ContainerAllocator& _alloc)
    : data0(0.0)
    , data1(0)
    , data2(0)
    , data3(0.0)
    , data4(0.0)  {
  (void)_alloc;
    }



   typedef double _data0_type;
  _data0_type data0;

   typedef int32_t _data1_type;
  _data1_type data1;

   typedef int32_t _data2_type;
  _data2_type data2;

   typedef double _data3_type;
  _data3_type data3;

   typedef double _data4_type;
  _data4_type data4;





  typedef boost::shared_ptr< ::potentiometer::Log_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::potentiometer::Log_<ContainerAllocator> const> ConstPtr;

}; // struct Log_

typedef ::potentiometer::Log_<std::allocator<void> > Log;

typedef boost::shared_ptr< ::potentiometer::Log > LogPtr;
typedef boost::shared_ptr< ::potentiometer::Log const> LogConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::potentiometer::Log_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::potentiometer::Log_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace potentiometer

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'potentiometer': ['/home/pi/winch_ws/src/potentiometer/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::potentiometer::Log_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::potentiometer::Log_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::potentiometer::Log_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::potentiometer::Log_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::potentiometer::Log_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::potentiometer::Log_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::potentiometer::Log_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3bc9c20a1bbcd292f1a59fbbe069fe8d";
  }

  static const char* value(const ::potentiometer::Log_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3bc9c20a1bbcd292ULL;
  static const uint64_t static_value2 = 0xf1a59fbbe069fe8dULL;
};

template<class ContainerAllocator>
struct DataType< ::potentiometer::Log_<ContainerAllocator> >
{
  static const char* value()
  {
    return "potentiometer/Log";
  }

  static const char* value(const ::potentiometer::Log_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::potentiometer::Log_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 data0\n\
int32 data1\n\
int32 data2\n\
float64 data3\n\
float64 data4\n\
";
  }

  static const char* value(const ::potentiometer::Log_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::potentiometer::Log_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data0);
      stream.next(m.data1);
      stream.next(m.data2);
      stream.next(m.data3);
      stream.next(m.data4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Log_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::potentiometer::Log_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::potentiometer::Log_<ContainerAllocator>& v)
  {
    s << indent << "data0: ";
    Printer<double>::stream(s, indent + "  ", v.data0);
    s << indent << "data1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.data1);
    s << indent << "data2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.data2);
    s << indent << "data3: ";
    Printer<double>::stream(s, indent + "  ", v.data3);
    s << indent << "data4: ";
    Printer<double>::stream(s, indent + "  ", v.data4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POTENTIOMETER_MESSAGE_LOG_H
